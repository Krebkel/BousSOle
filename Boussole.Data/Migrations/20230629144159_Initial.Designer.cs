// <auto-generated />
using System;
using Boussole.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Boussole.Data.Migrations
{
    [DbContext(typeof(BousSOleDbContext))]
    [Migration("20230629144159_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bousSOle")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Boussole.Docs.Contracts.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpectedGraduationYear")
                        .HasColumnType("integer");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PersonId");

                    b.ToTable("Education", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Docs.Contracts.Passport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DivisionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OMS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationIndex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SNILS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Passport", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Docs.Contracts.PersonMerch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClothesSize")
                        .HasColumnType("integer");

                    b.Property<int>("PersonHeight")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ShoeSize")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonMerch", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Docs.Contracts.ProfessionalEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CertificateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("ProfessionalEducation", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Institutions.Contracts.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministratorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdministratorPatronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdministratorSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdministratorTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShtabId")
                        .HasColumnType("integer");

                    b.Property<string>("StructWebsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShtabId");

                    b.ToTable("Institutions", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.ElementNorm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("BaseNorm")
                        .HasColumnType("real");

                    b.Property<float?>("DistanceNorm")
                        .HasColumnType("real");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormCollection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormTypeByDistance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ElementNorms", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.FactWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<int>("ElementNormId")
                        .HasColumnType("integer");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<int>("SquadId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ElementNormId");

                    b.HasIndex("SquadId");

                    b.ToTable("FactWorks", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.PlanWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SquadMemberId")
                        .HasColumnType("integer");

                    b.Property<float>("WorkHours")
                        .HasColumnType("real");

                    b.Property<int>("WorkerActivityStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SquadMemberId");

                    b.ToTable("PlanWorks", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.Structure.Squad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityField")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShtabId")
                        .HasColumnType("integer");

                    b.Property<string>("VkUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShtabId");

                    b.ToTable("Squads", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.Structure.SquadMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MemberRank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("SquadId")
                        .HasColumnType("integer");

                    b.Property<int>("YearEnlisted")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SquadId");

                    b.ToTable("SquadMembers", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Persons.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonInn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.CalculatedFactWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<int?>("ElementNormId")
                        .HasColumnType("integer");

                    b.Property<int>("FactWorkId")
                        .HasColumnType("integer");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ElementNormId");

                    b.HasIndex("FactWorkId");

                    b.ToTable("CalculatedFactWork", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.Coefficients.ActivityCoefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("RatingPoints")
                        .HasColumnType("real");

                    b.Property<string>("SquadActivityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkProjectImplementationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkProjectImplementationId");

                    b.ToTable("ActivityCoefficient", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.Coefficients.AdditionalCoefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("MaxPoints")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Transcript")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkProjectImplementationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkProjectImplementationId");

                    b.ToTable("AdditionalCoefficient", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.Coefficients.DisciplineCoefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("PointsReduction")
                        .HasColumnType("real");

                    b.Property<string>("ViolationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkProjectImplementationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkProjectImplementationId");

                    b.ToTable("DisciplineCoefficient", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.Coefficients.ProductivityCoefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("ProizvodkaStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RatingPoints")
                        .HasColumnType("integer");

                    b.Property<int>("WorkProjectImplementationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkProjectImplementationId");

                    b.ToTable("ProductivityCoefficient", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.ProjectEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectEventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkProjectImplementationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkProjectImplementationId");

                    b.ToTable("ProjectEvent", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.SquadAdditionalCoefficientParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdditionalCoefficientId")
                        .HasColumnType("integer");

                    b.Property<float>("RatingPoints")
                        .HasColumnType("real");

                    b.Property<int>("SquadProjectParticipationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalCoefficientId");

                    b.HasIndex("SquadProjectParticipationId");

                    b.ToTable("SquadAdditionalCoefficientParticipation", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.SquadEventParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityCoefficientId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectEventId")
                        .HasColumnType("integer");

                    b.Property<int>("SquadProjectParticipationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityCoefficientId");

                    b.HasIndex("ProjectEventId");

                    b.HasIndex("SquadProjectParticipationId");

                    b.ToTable("SquadEventParticipation", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.SquadOnProject.SquadMemberWorkTimeSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("ChillDays")
                        .HasColumnType("real");

                    b.Property<int>("SquadMemberId")
                        .HasColumnType("integer");

                    b.Property<float>("WorkDays")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("WorkStartDay")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SquadMemberId");

                    b.ToTable("SquadMemberWorkTimeSchedule", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.SquadOnProject.SquadMemberWorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SquadMemberId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkerActivityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("WorkingHours")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SquadMemberId");

                    b.ToTable("SquadMemberWorkingDay", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.SquadOnProject.SquadProjectParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SquadApplicationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SquadId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkProjectImplementationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SquadId");

                    b.HasIndex("WorkProjectImplementationId");

                    b.ToTable("SquadProjectParticipation", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.WorkProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityField")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkProject", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.WorkProjectImplementation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkProjectId");

                    b.ToTable("WorkProjectImplementation", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Shtabs.Contracts.Okrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Okrug", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Shtabs.Contracts.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OkrugId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OkrugId");

                    b.ToTable("Region", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Shtabs.Contracts.Shtab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentShtabId")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<string>("ShtabRank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentShtabId");

                    b.HasIndex("RegionId");

                    b.ToTable("Shtab", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Shtabs.Contracts.ShtabMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ShtabId")
                        .HasColumnType("integer");

                    b.Property<string>("ShtabMemberRank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialty")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("ShtabId");

                    b.ToTable("ShtabMember", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Docs.Contracts.Education", b =>
                {
                    b.HasOne("Boussole.Institutions.Contracts.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Boussole.Docs.Contracts.Passport", b =>
                {
                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Boussole.Docs.Contracts.PersonMerch", b =>
                {
                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Boussole.Docs.Contracts.ProfessionalEducation", b =>
                {
                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Boussole.Institutions.Contracts.Institution", b =>
                {
                    b.HasOne("Boussole.Shtabs.Contracts.Shtab", "Shtab")
                        .WithMany()
                        .HasForeignKey("ShtabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shtab");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.FactWork", b =>
                {
                    b.HasOne("Boussole.LSO.Contracts.SSO.ElementNorm", "ElementNorm")
                        .WithMany()
                        .HasForeignKey("ElementNormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.LSO.Contracts.Structure.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementNorm");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.PlanWork", b =>
                {
                    b.HasOne("Boussole.LSO.Contracts.Structure.SquadMember", "SquadMember")
                        .WithMany()
                        .HasForeignKey("SquadMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SquadMember");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.Structure.Squad", b =>
                {
                    b.HasOne("Boussole.Shtabs.Contracts.Shtab", "Shtab")
                        .WithMany()
                        .HasForeignKey("ShtabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shtab");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.Structure.SquadMember", b =>
                {
                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.LSO.Contracts.Structure.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.CalculatedFactWork", b =>
                {
                    b.HasOne("Boussole.LSO.Contracts.SSO.ElementNorm", "ElementNorm")
                        .WithMany()
                        .HasForeignKey("ElementNormId");

                    b.HasOne("Boussole.LSO.Contracts.SSO.FactWork", "FactWork")
                        .WithMany()
                        .HasForeignKey("FactWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementNorm");

                    b.Navigation("FactWork");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.Coefficients.ActivityCoefficient", b =>
                {
                    b.HasOne("Boussole.Project.Contracts.Structure.WorkProjectImplementation", "WorkProjectImplementation")
                        .WithMany()
                        .HasForeignKey("WorkProjectImplementationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkProjectImplementation");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.Coefficients.AdditionalCoefficient", b =>
                {
                    b.HasOne("Boussole.Project.Contracts.Structure.WorkProjectImplementation", "WorkProjectImplementation")
                        .WithMany()
                        .HasForeignKey("WorkProjectImplementationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkProjectImplementation");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.Coefficients.DisciplineCoefficient", b =>
                {
                    b.HasOne("Boussole.Project.Contracts.Structure.WorkProjectImplementation", "WorkProjectImplementation")
                        .WithMany()
                        .HasForeignKey("WorkProjectImplementationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkProjectImplementation");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.Coefficients.ProductivityCoefficient", b =>
                {
                    b.HasOne("Boussole.Project.Contracts.Structure.WorkProjectImplementation", "WorkProjectImplementation")
                        .WithMany()
                        .HasForeignKey("WorkProjectImplementationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkProjectImplementation");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.ProjectEvent", b =>
                {
                    b.HasOne("Boussole.Project.Contracts.Structure.WorkProjectImplementation", "WorkProjectImplementation")
                        .WithMany()
                        .HasForeignKey("WorkProjectImplementationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkProjectImplementation");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.SquadAdditionalCoefficientParticipation", b =>
                {
                    b.HasOne("Boussole.Project.Contracts.Rating.Coefficients.AdditionalCoefficient", "AdditionalCoefficient")
                        .WithMany()
                        .HasForeignKey("AdditionalCoefficientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.Project.Contracts.Structure.SquadOnProject.SquadProjectParticipation", "SquadProjectParticipation")
                        .WithMany()
                        .HasForeignKey("SquadProjectParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalCoefficient");

                    b.Navigation("SquadProjectParticipation");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Rating.SquadEventParticipation", b =>
                {
                    b.HasOne("Boussole.Project.Contracts.Rating.Coefficients.ActivityCoefficient", "ActivityCoefficient")
                        .WithMany()
                        .HasForeignKey("ActivityCoefficientId");

                    b.HasOne("Boussole.Project.Contracts.Rating.ProjectEvent", "ProjectEvent")
                        .WithMany()
                        .HasForeignKey("ProjectEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.Project.Contracts.Structure.SquadOnProject.SquadProjectParticipation", "SquadProjectParticipation")
                        .WithMany()
                        .HasForeignKey("SquadProjectParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityCoefficient");

                    b.Navigation("ProjectEvent");

                    b.Navigation("SquadProjectParticipation");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.SquadOnProject.SquadMemberWorkTimeSchedule", b =>
                {
                    b.HasOne("Boussole.LSO.Contracts.Structure.SquadMember", "SquadMember")
                        .WithMany()
                        .HasForeignKey("SquadMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SquadMember");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.SquadOnProject.SquadMemberWorkingDay", b =>
                {
                    b.HasOne("Boussole.LSO.Contracts.Structure.SquadMember", "SquadMember")
                        .WithMany()
                        .HasForeignKey("SquadMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SquadMember");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.SquadOnProject.SquadProjectParticipation", b =>
                {
                    b.HasOne("Boussole.LSO.Contracts.Structure.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.Project.Contracts.Structure.WorkProjectImplementation", "WorkProjectImplementation")
                        .WithMany()
                        .HasForeignKey("WorkProjectImplementationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Squad");

                    b.Navigation("WorkProjectImplementation");
                });

            modelBuilder.Entity("Boussole.Project.Contracts.Structure.WorkProjectImplementation", b =>
                {
                    b.HasOne("Boussole.Project.Contracts.Structure.WorkProject", "WorkProject")
                        .WithMany()
                        .HasForeignKey("WorkProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkProject");
                });

            modelBuilder.Entity("Boussole.Shtabs.Contracts.Region", b =>
                {
                    b.HasOne("Boussole.Shtabs.Contracts.Okrug", "Okrug")
                        .WithMany()
                        .HasForeignKey("OkrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Okrug");
                });

            modelBuilder.Entity("Boussole.Shtabs.Contracts.Shtab", b =>
                {
                    b.HasOne("Boussole.Shtabs.Contracts.Shtab", "ParentShtab")
                        .WithMany()
                        .HasForeignKey("ParentShtabId");

                    b.HasOne("Boussole.Shtabs.Contracts.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentShtab");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Boussole.Shtabs.Contracts.ShtabMember", b =>
                {
                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.Shtabs.Contracts.Shtab", "Shtab")
                        .WithMany()
                        .HasForeignKey("ShtabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Shtab");
                });

            modelBuilder.Entity("Boussole.Users.User", b =>
                {
                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
