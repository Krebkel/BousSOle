// <auto-generated />
using System;
using Boussole.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Boussole.Data.Migrations
{
    [DbContext(typeof(BousSOleDbContext))]
    [Migration("20230611121736_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bousSOle")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Boussole.Institutions.Contracts.Institution", b =>
                {
                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("AdministratorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdministratorPatronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdministratorSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdministratorTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StructWebsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FullName");

                    b.ToTable("Institutions", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.ElementNorm", b =>
                {
                    b.Property<string>("NormCollection")
                        .HasColumnType("text");

                    b.Property<string>("NormCode")
                        .HasColumnType("text");

                    b.Property<float>("BaseNorm")
                        .HasColumnType("real");

                    b.Property<float?>("DistanceNorm")
                        .HasColumnType("real");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormTypeByDistance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NormCollection", "NormCode");

                    b.ToTable("ElementNorms", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.FactWork", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SquadName")
                        .HasColumnType("text");

                    b.Property<string>("NormCollection")
                        .HasColumnType("text");

                    b.Property<string>("NormCode")
                        .HasColumnType("text");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("WorkName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Date", "SquadName", "NormCollection", "NormCode");

                    b.HasIndex("SquadName");

                    b.HasIndex("NormCollection", "NormCode");

                    b.ToTable("FactWorks", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.PlanWork", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SquadMemberPersonInn")
                        .HasColumnType("text");

                    b.Property<float>("WorkHours")
                        .HasColumnType("real");

                    b.Property<string>("WorkerActivityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Date", "SquadMemberPersonInn");

                    b.HasIndex("SquadMemberPersonInn");

                    b.ToTable("PlanWorks", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.Structure.Squad", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SquadType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VkUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.HasIndex("InstitutionFullName");

                    b.ToTable("Squads", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.Structure.SquadMember", b =>
                {
                    b.Property<string>("PersonInn")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MemberRank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SquadName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearEnlisted")
                        .HasColumnType("integer");

                    b.HasKey("PersonInn");

                    b.HasIndex("SquadName");

                    b.ToTable("SquadMembers", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Persons.Person", b =>
                {
                    b.Property<string>("PersonInn")
                        .HasColumnType("text");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonInn");

                    b.ToTable("Persons", "bousSOle");
                });

            modelBuilder.Entity("Boussole.Users.User", b =>
                {
                    b.Property<string>("PersonInn")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonInn");

                    b.ToTable("Users", "bousSOle");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.FactWork", b =>
                {
                    b.HasOne("Boussole.LSO.Contracts.Structure.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.LSO.Contracts.SSO.ElementNorm", "ElementNorm")
                        .WithMany()
                        .HasForeignKey("NormCollection", "NormCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElementNorm");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.SSO.PlanWork", b =>
                {
                    b.HasOne("Boussole.LSO.Contracts.Structure.SquadMember", "SquadMember")
                        .WithMany()
                        .HasForeignKey("SquadMemberPersonInn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SquadMember");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.Structure.Squad", b =>
                {
                    b.HasOne("Boussole.Institutions.Contracts.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionFullName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Boussole.LSO.Contracts.Structure.SquadMember", b =>
                {
                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonInn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boussole.LSO.Contracts.Structure.Squad", "Squad")
                        .WithMany()
                        .HasForeignKey("SquadName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("Boussole.Users.User", b =>
                {
                    b.HasOne("Boussole.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonInn")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
